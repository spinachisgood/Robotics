#!/usr/bin/env python

import math
import rospy
import tf2_ros
import tf2_geometry_msgs
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import PoseStamped
from aruco_msgs.msg import MarkerArray
from crazyflie_driver.msg import Position

# Current goal (global state)
goal = None

def ac_callback(msg):
    global goal

    goal = msg
    #rospy.loginfo('Message is %s',msg)

def publish_cmd(goal):
     cmd = PoseStamped()
     cmd.header.stamp = rospy.Time.now()
     cmd.header.frame_id = goal.header.frame_id
     rospy.loginfo(goal)
     for i in goal.markers:
      rospy.sleep(2)
      cmd.pose.position.x,cmd.pose.position.y,cmd.pose.position.z =i.pose.pose.position.x,i.pose.pose.position.y,i.pose.pose.position.z	
      cmd.pose.orientation.x,cmd.pose.orientation.y,cmd.pose.orientation.z,cmd.pose.orientation.w = i.pose.pose.orientation.x,i.pose.pose.orientation.y,i.pose.pose.orientation.z,i.pose.pose.orientation.w		
      goal_map = tf_buf.transform(cmd,'map')
      
      print("The transform is")
      rospy.loginfo('Transformed msg is %s',goal_map)
    #pub_cmd.publish(cmd)
     return
 


rospy.init_node('ltf')
sub_goal = rospy.Subscriber('/aruco/markers', MarkerArray, ac_callback)
pub_cmd  = rospy.Publisher('/aruco/detected', PoseStamped, queue_size=2)
tf_buf   = tf2_ros.Buffer()
tf_lstn  = tf2_ros.TransformListener(tf_buf)

def main():
    rate = rospy.Rate(10)  # Hz
    while not rospy.is_shutdown():
        if goal:
            publish_cmd(goal)
        rate.sleep()

if __name__ == '__main__':
    main()

